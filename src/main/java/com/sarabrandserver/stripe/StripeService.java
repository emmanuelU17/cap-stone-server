package com.sarabrandserver.stripe;

import com.sarabrandserver.enumeration.SarreCurrency;
import com.sarabrandserver.exception.CustomStripeException;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Price;
import com.stripe.model.Product;
import com.stripe.param.PriceCreateParams;
import com.stripe.param.ProductCreateParams;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class StripeService {

    private static final Logger log = LoggerFactory.getLogger(StripeService.class);

    @Value(value = "${stripe.api.key}") private String APIKEY;

    /**
     * Create a com.stripe.model.Product
     * <a href="https://stripe.com/docs/api/products/create?lang=java">...</a>
     *
     * @param productName is the product name
     * @param pairs       PriceCurrencyPair array which is a unitAmount to currency pair
     * @return String which is the productID generated by stripe
     */
    public String createProduct(String productName, PriceCurrencyPair... pairs) {
        try {
            Stripe.apiKey = APIKEY;

            // NGN as default. note it is always the first item in the array
            var ngnPrice = ProductCreateParams
                    .DefaultPriceData
                    .builder()
                    .setUnitAmount(pairs[0].unitAmount())
                    .setCurrency(pairs[0].currency().name())
                    .build();

            var params = ProductCreateParams.builder()
                    .setName(productName)
                    .setDefaultPriceData(ngnPrice)
                    .build();

            var product = Product.create(params);

            var price = createPrice(product.getId(), pairs[1].unitAmount(), pairs[1].currency());

            log.info("Product {}", product.toJson());
            log.info("Product gotten from price {}", price.getProduct());

            return product.getId();
        } catch (StripeException ex) {
            log.error("Error creating product. Stripe exception {}", ex.getMessage());
            throw new CustomStripeException("Error creating product. Stripe");
        }
    }

    /**
     * Returns a Stripe Price
     *
     * @param productId  is UUID attached to each product
     * @param unitAmount is the lowest unit price of product. E.g. 10 USD is 1,000 cents,
     *                   which means their price unit_amount is 1000.
     * @param currency   is based on the Enum SarreCurrency
     * @return Price of type com.stripe.model.Price
     * @throws StripeException which is a checked exception
     */
    private static Price createPrice(
            String productId,
            long unitAmount,
            SarreCurrency currency
    ) throws StripeException {
        var params = PriceCreateParams.builder()
                .setProduct(productId)
                .setUnitAmount(unitAmount)
                .setCurrency(currency.name())
                .build();
        return Price.create(params);
    }

}